# -*- coding: utf-8 -*-
"""HCI.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Wb8_wastyVXYzc85J6RAZVJsOHIJFlfO
"""

#!pip install -Uqq fastbook
import fastbook
fastbook.setup_book()
from fastbook import *
from fastai.vision.widgets import *

key = os.environ.get('AZURE_SEARCH_KEY', '36d38fa2aa544e3fa5f4ac7337cde590')
import os
os.mkdir('images')
types = 'Tank', 'Plane', 'Ship'
path = Path('types')
if not path.exists():
  path.mkdir()
  for type in types:
    dest = (path/type)
    dest.mkdir(exist_ok=True)
    results = search_images_bing(key, f'military {type}')
    download_images(dest, urls=results.attrgot('contentUrl'))

fns = get_image_files(path)
fns
failed = verify_images(fns)
failed

failed.map(Path.unlink);

types = DataBlock(blocks=(ImageBlock, CategoryBlock), get_items=get_image_files, 
                  splitter=RandomSplitter(valid_pct=0.2, seed=42), get_y=parent_label, item_tfms=Resize(128))

dls = types.dataloaders(path)
dls.valid.show_batch(max_n=4, nrows=1)

types = types.new(item_tfms=Resize(128, ResizeMethod.Squish))
dls = types.dataloaders(path)
dls.valid.show_batch(max_n=4, nrows=1)

types = types.new(item_tfms=RandomResizedCrop(128, min_scale=0.3))
dls = types.dataloaders(path)
dls.valid.show_batch(max_n=4, nrows=1, unique=True)

types = types.new(item_tfms=Resize(128), batch_tfms=aug_transforms(mult=2))
dls = types.dataloaders(path)
dls.train.show_batch(max_n=8, unique=True)

types = types.new(item_tfms=RandomResizedCrop(224, min_scale=0.5), batch_tfms=aug_transforms())
dls = types.dataloaders(path)
learn = cnn_learner(dls, resnet18, metrics=error_rate)
learn.fine_tune(5)

interp = ClassificationInterpretation.from_learner(learn)
interp.plot_confusion_matrix()

interp.plot_top_losses(5, nrows=1)

cleaner = ImageClassifierCleaner(learn)
cleaner

for idx in cleaner.delete(): cleaner.fns[idx].unlink()
for idx, cat in cleaner.change(): shutil.move(str(cleaner.fns[idx]), path/cat)

learn.export()
path = Path()
path.ls(file_exts='.pkl')

learn_inf = load_learner(path/'export.pkl')
btn_upload = widgets.FileUpload()
btn_upload

img = PILImage.create(btn_upload.data[-1])
out_pl = widgets.Output()
out_pl.clear_output()
with out_pl: display(img.to_thumb(128,128))
out_pl

pred,pred_idx,probs = learn_inf.predict(img)
lbl_pred = widgets.Label()
lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'
lbl_pred

btn_run = widgets.Button(decription='Classify')
btn_run

def on_click_classify(change):
  img = PILImage.create(btn_upload.data[-1])
  out_pl.clear_output()
  with out_pl: display(img.to_thumb(128,128))
  pred,pred_idx,probs = learn_inf.predict(img)
  lbl_pred.value = f'Prediction: {pred}; Probability: {probs[pred_idx]:.04f}'

btn_run.on_click(on_click_classify)

btn_upload = widgets.FileUpload()
VBox([widgets.Label('Select your vehicle!'), btn_upload, btn_run, out_pl, lbl_pred])